/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui.panel;

import db.connection.PersonnelDAO;
import db.connection.UnionDAO;
import entities.ComboBoxItems;
import java.awt.event.ActionEvent;
import java.io.File;
import java.util.ArrayList;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JSeparator;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;
import entities.DocumentsDetails;
import entities.Education;
import entities.Experience;
import entities.FamilyDetails;
import entities.FileTypeFilter;
import entities.HealthStatus;
import entities.PersonnelDetails;
import entities.Skill;
import gui.frames.Addition;
import java.awt.Desktop;
import java.awt.Image;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import java.awt.image.BufferedImage;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.Date;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import worker.AllFunction;
import worker.Check;
import worker.DateTime;
import worker.Dialog;
import worker.Message;

/**
 *
 * @author HUNGUYEN
 */
public final class PanelInfo extends javax.swing.JPanel implements ItemListener {

    /**
     * Creates new form InfoPanel
     */
    private int mode;
    private byte[] personnelImage = null;
    private byte[] file = null;
    private String fileExtension = "";
    private ArrayList<byte[]> perFile = new ArrayList<>();

    private ArrayList<Short> familyID;
    private ArrayList<Short> healthID;
    private ArrayList<Short> eduID;
    private ArrayList<Short> skillID;
    private ArrayList<Short> expID;
    private ArrayList<Short> docID;

    private void setArray() {
        familyID = new ArrayList<>();
        healthID = new ArrayList<>();
        eduID = new ArrayList<>();
        skillID = new ArrayList<>();
        expID = new ArrayList<>();
        docID = new ArrayList<>();
    }

    private int getMode() {
        return mode;
    }

    private void setMode(int mode) {
        if (mode == 1) {
            tfPersonnelID.setEnabled(false);
        } else {
            tfPersonnelID.setEnabled(true);
        }
        this.mode = mode;
    }

    public String getFileExtension() {
        return fileExtension;
    }

    public void setFileExtension(String fileExtension) {
        this.fileExtension = fileExtension;
    }

    public byte[] getFile() {
        return file;
    }

    public void setFile(byte[] file) {
        this.file = file;
    }

    public byte[] getPersonnelImage() {
        return personnelImage;
    }

    public void setPersonnelImage(byte[] personnelImage) {
        this.personnelImage = personnelImage;
    }

    private final PersonnelDAO pDAO = new PersonnelDAO();
    private JPopupMenu picPopupMenu;

    // Them moi
    public PanelInfo() {
        initComponents();
        loadComboBox();
        setArray();
        setPopupMenu(pnPicture);
        setMode(1);
        setComboboxListener();
        tfPersonnelID.setText(AllFunction.generatorID(pDAO.getMaxID(), "NV"));
    }

    // Thong tin chi tiet
    public PanelInfo(PersonnelDetails pDetails, ArrayList<FamilyDetails> familyList, ArrayList<HealthStatus> healthList,
            ArrayList<Education> eduList, ArrayList<Skill> skillList, ArrayList<Experience> expList,
            ArrayList<DocumentsDetails> docList) {

        initComponents();
        loadComboBox();
        setPopupMenu(pnPicture);
        setArray();

        setInfoTab(pDetails);
        loadHealthStatusTable(healthList);
        loadFamilyInfoTable(familyList);
        loadEducationTable(eduList);
        loadSkillTable(skillList);
        loadExpTable(expList);
        loadDocTable(docList);
        setMode(2);                     //mode for InfoPanel
        setComboboxListener();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgSex = new javax.swing.ButtonGroup();
        bgMarried = new javax.swing.ButtonGroup();
        tpInfo = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel74 = new javax.swing.JLabel();
        jLabel75 = new javax.swing.JLabel();
        jLabel76 = new javax.swing.JLabel();
        tfPersonnelID = new javax.swing.JTextField();
        tfFirstName = new javax.swing.JTextField();
        tfLastName = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        dcEnterDate = new com.toedter.calendar.JDateChooser();
        jLabel6 = new javax.swing.JLabel();
        cbStatus = new javax.swing.JComboBox();
        jLabel11 = new javax.swing.JLabel();
        dcStartDate = new com.toedter.calendar.JDateChooser();
        jLabel15 = new javax.swing.JLabel();
        dcEndTrainingDate = new com.toedter.calendar.JDateChooser();
        jLabel5 = new javax.swing.JLabel();
        tfNickname = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        rbFemale = new javax.swing.JRadioButton();
        rbMale = new javax.swing.JRadioButton();
        jLabel77 = new javax.swing.JLabel();
        cbKind = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        cbPosition = new javax.swing.JComboBox();
        jLabel9 = new javax.swing.JLabel();
        cbOffice = new javax.swing.JComboBox();
        jLabel78 = new javax.swing.JLabel();
        tfCompEmail = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        cbContract = new javax.swing.JComboBox();
        pnPicture = new javax.swing.JPanel();
        lbPicture = new javax.swing.JLabel();
        jPanel10 = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        dcPerBirth = new com.toedter.calendar.JDateChooser();
        jLabel18 = new javax.swing.JLabel();
        tfPlaceOfBirth = new javax.swing.JTextField();
        jLabel79 = new javax.swing.JLabel();
        tfRecentAdd = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        rbMarried = new javax.swing.JRadioButton();
        rbSingle = new javax.swing.JRadioButton();
        jLabel23 = new javax.swing.JLabel();
        cbNation = new javax.swing.JComboBox();
        jLabel24 = new javax.swing.JLabel();
        cbFolk = new javax.swing.JComboBox();
        jLabel25 = new javax.swing.JLabel();
        cbReligion = new javax.swing.JComboBox();
        tfEduLevel = new javax.swing.JTextField();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        tfPerAdd = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        tfPerPhone = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        tfPerEmail = new javax.swing.JTextField();
        lbNote = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jPanel14 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        tfIDNum = new javax.swing.JTextField();
        dcIDDay = new com.toedter.calendar.JDateChooser();
        tfIDPlace = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        cbRegion = new javax.swing.JComboBox();
        jPanel11 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        tfBankCode = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        cbBank = new javax.swing.JComboBox();
        jLabel22 = new javax.swing.JLabel();
        tfTaxCode = new javax.swing.JTextField();
        lbNote1 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        tfHeight = new javax.swing.JTextField();
        jLabel34 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        tfHospital = new javax.swing.JTextField();
        jLabel36 = new javax.swing.JLabel();
        tfWeight = new javax.swing.JTextField();
        jLabel37 = new javax.swing.JLabel();
        tfSight = new javax.swing.JTextField();
        jLabel38 = new javax.swing.JLabel();
        tfHealthNote = new javax.swing.JTextField();
        jLabel39 = new javax.swing.JLabel();
        jLabel40 = new javax.swing.JLabel();
        jLabel46 = new javax.swing.JLabel();
        dcCheckDate = new com.toedter.calendar.JDateChooser();
        cbBlood = new javax.swing.JComboBox();
        cbHealthStatus = new javax.swing.JComboBox();
        lbNote3 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        tbHealthStatus = new javax.swing.JTable();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbFamilyInfo = new javax.swing.JTable();
        jPanel12 = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        cbRelationship = new javax.swing.JComboBox();
        tfFullname = new javax.swing.JTextField();
        dcBirth = new com.toedter.calendar.JDateChooser();
        jLabel31 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        tfJob = new javax.swing.JTextField();
        tfAdd = new javax.swing.JTextField();
        tfPhone = new javax.swing.JTextField();
        lbNote4 = new javax.swing.JLabel();
        jPanel6 = new javax.swing.JPanel();
        jPanel15 = new javax.swing.JPanel();
        jLabel41 = new javax.swing.JLabel();
        tfCourseName = new javax.swing.JTextField();
        jLabel42 = new javax.swing.JLabel();
        jLabel43 = new javax.swing.JLabel();
        jLabel44 = new javax.swing.JLabel();
        jLabel45 = new javax.swing.JLabel();
        tfSchool = new javax.swing.JTextField();
        jLabel47 = new javax.swing.JLabel();
        cbCertification = new javax.swing.JComboBox();
        cbKindOfEdu = new javax.swing.JComboBox();
        ycFromYear = new com.toedter.calendar.JYearChooser();
        ycToYear = new com.toedter.calendar.JYearChooser();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbEducation = new javax.swing.JTable();
        jPanel7 = new javax.swing.JPanel();
        jPanel16 = new javax.swing.JPanel();
        jLabel48 = new javax.swing.JLabel();
        lbNote5 = new javax.swing.JLabel();
        jLabel53 = new javax.swing.JLabel();
        tfSkillNote = new javax.swing.JTextField();
        jLabel58 = new javax.swing.JLabel();
        dcEffectiveDate = new com.toedter.calendar.JDateChooser();
        cbSkill = new javax.swing.JComboBox();
        cbRank = new javax.swing.JComboBox();
        jLabel50 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tbSkill = new javax.swing.JTable();
        jPanel8 = new javax.swing.JPanel();
        jPanel19 = new javax.swing.JPanel();
        tfCompName = new javax.swing.JTextField();
        jLabel52 = new javax.swing.JLabel();
        tfExpPos = new javax.swing.JTextField();
        jLabel59 = new javax.swing.JLabel();
        tfDescribeJob = new javax.swing.JTextField();
        jLabel60 = new javax.swing.JLabel();
        jLabel61 = new javax.swing.JLabel();
        jLabel62 = new javax.swing.JLabel();
        dcExpStartDate = new com.toedter.calendar.JDateChooser();
        dcExpQuitDate = new com.toedter.calendar.JDateChooser();
        jLabel29 = new javax.swing.JLabel();
        tfReason = new javax.swing.JTextField();
        lbNote6 = new javax.swing.JLabel();
        jPanel20 = new javax.swing.JPanel();
        tfRefereeName = new javax.swing.JTextField();
        jLabel64 = new javax.swing.JLabel();
        tfRefereePos = new javax.swing.JTextField();
        jLabel65 = new javax.swing.JLabel();
        tfRefereeEmail = new javax.swing.JTextField();
        jLabel66 = new javax.swing.JLabel();
        tfRefereePhone = new javax.swing.JTextField();
        jLabel67 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tbExpList = new javax.swing.JTable();
        jPanel9 = new javax.swing.JPanel();
        jPanel21 = new javax.swing.JPanel();
        tfDocName = new javax.swing.JTextField();
        jLabel68 = new javax.swing.JLabel();
        jLabel69 = new javax.swing.JLabel();
        jLabel70 = new javax.swing.JLabel();
        tfDocLink = new javax.swing.JTextField();
        jLabel72 = new javax.swing.JLabel();
        tfDocInfo = new javax.swing.JTextField();
        jLabel73 = new javax.swing.JLabel();
        btFileChooser = new javax.swing.JButton();
        dcSaveDate = new com.toedter.calendar.JDateChooser();
        cbKindofDoc = new javax.swing.JComboBox();
        lbNote7 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        tbDocument = new javax.swing.JTable();
        btSave = new javax.swing.JButton();
        btUndo = new javax.swing.JButton();
        btDel = new javax.swing.JButton();
        btAdd = new javax.swing.JButton();
        btOpenFile = new javax.swing.JButton();

        tpInfo.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        tpInfo.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                tpInfoStateChanged(evt);
            }
        });

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Thông tin cơ bản"));

        jLabel74.setText("<html><font color=\"red\">(*)</font> Mã NV:");

        jLabel75.setText("<html><font color=\"red\">(*)</font> Họ đệm:");

        jLabel76.setText("<html><font color=\"red\">(*)</font> Tên:");

        jLabel10.setText("<html><font color=\"red\">(*) </font>Ngày vào công ty:");

        dcEnterDate.setDateFormatString("dd - MM - yyyy");

        jLabel6.setText("Trạng thái:");

        cbStatus.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbStatus.setActionCommand("1");

        jLabel11.setText("Ngày bắt đầu:");

        dcStartDate.setDateFormatString("dd - MM - yyyy");

        jLabel15.setText("Ngày kết thúc thử việc:");

        dcEndTrainingDate.setDateFormatString("dd - MM - yyyy");

        jLabel5.setText("Bí danh:");

        jLabel14.setText("Giới tính:");

        bgSex.add(rbFemale);
        rbFemale.setText("Nữ");
        rbFemale.setActionCommand("Nữ");

        bgSex.add(rbMale);
        rbMale.setSelected(true);
        rbMale.setText("Nam");
        rbMale.setActionCommand("Nam");

        jLabel77.setText("<html><font color=\"red\">(*) </font>Loại nhân viên:");

        cbKind.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbKind.setActionCommand("2");

        jLabel8.setText("<html><font color=\"red\">(*) </font>Chức vụ:");

        cbPosition.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbPosition.setActionCommand("3");

        jLabel9.setText("<html><font color=\"red\">(*) </font>Phòng ban:");

        cbOffice.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbOffice.setActionCommand("4");

        jLabel78.setText("<html><font color=\"red\">(*) </font>Email công ty:");

        jLabel7.setText("<html><font color=\"red\">(*) </font>Loại hợp đồng:");

        cbContract.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbContract.setActionCommand("5");

        lbPicture.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbPicture.setText("Ảnh cá nhân");
        lbPicture.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        lbPicture.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        lbPicture.setMinimumSize(new java.awt.Dimension(150, 200));

        javax.swing.GroupLayout pnPictureLayout = new javax.swing.GroupLayout(pnPicture);
        pnPicture.setLayout(pnPictureLayout);
        pnPictureLayout.setHorizontalGroup(
            pnPictureLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lbPicture, javax.swing.GroupLayout.DEFAULT_SIZE, 162, Short.MAX_VALUE)
        );
        pnPictureLayout.setVerticalGroup(
            pnPictureLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lbPicture, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnPicture, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(55, 55, 55)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel75, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfLastName, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel76, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel74, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfPersonnelID, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                            .addComponent(jLabel15)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(dcEndTrainingDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(dcStartDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                            .addComponent(jLabel6)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(cbStatus, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(dcEnterDate, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel78, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfCompEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel77, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14))
                .addGap(8, 8, 8)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tfNickname, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(rbMale, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rbFemale, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(cbKind, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbPosition, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbOffice, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbContract, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(187, Short.MAX_VALUE))
        );

        jPanel3Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel10, jLabel11, jLabel15, jLabel6, jLabel74, jLabel75, jLabel78});

        jPanel3Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel14, jLabel5, jLabel7, jLabel77, jLabel8, jLabel9});

        jPanel3Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {rbFemale, rbMale});

        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(tfPersonnelID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5)
                            .addComponent(tfNickname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel74, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(tfFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel14)
                            .addComponent(rbFemale)
                            .addComponent(rbMale)
                            .addComponent(jLabel75, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel76, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(dcEnterDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel77, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbKind, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(cbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbPosition, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(dcStartDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbOffice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(dcEndTrainingDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cbContract, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabel78, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfCompEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(pnPicture, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        jPanel3Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabel10, jLabel11, jLabel14, jLabel15, jLabel5, jLabel6, jLabel7, jLabel74, jLabel75, jLabel77, jLabel78, jLabel8, jLabel9});

        jPanel3Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {rbFemale, rbMale});

        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder("Thông tin cá nhân"));

        jLabel16.setText("<html><font color=\"red\">(*) </font>Ngày sinh:");

        dcPerBirth.setDateFormatString("dd - MM - yyyy");

        jLabel18.setText("<html><font color=\"red\">(*)</font> Nguyên quán:");

        jLabel79.setText("<html><font color=\"red\">(*)</font> Thường trú:");

        jLabel20.setText("Tình trạng hôn nhân:");

        bgMarried.add(rbMarried);
        rbMarried.setSelected(true);
        rbMarried.setText("Đã kết hôn");
        rbMarried.setActionCommand("Đã kết hôn");

        bgMarried.add(rbSingle);
        rbSingle.setText("Độc thân");
        rbSingle.setActionCommand("Độc thân");

        jLabel23.setText("Quốc tịch:");

        cbNation.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbNation.setActionCommand("6");

        jLabel24.setText("Dân tộc:");

        cbFolk.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbFolk.setActionCommand("7");

        jLabel25.setText("Tôn giáo:");

        cbReligion.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbReligion.setActionCommand("8");

        jLabel26.setText("<html><font color=\"red\">(*)</font> Trình độ văn hóa:");

        jLabel27.setText("<html><font color=\"red\">(*) </font>Địa chỉ nhà:");

        jLabel13.setText("<html><font color=\"red\">(*) </font>Số điện thoại:");

        jLabel21.setText("<html><font color=\"red\">(*)</font> Email cá nhân:");

        lbNote.setText("<html><font color=\"red\">Chú ý:</font> ");

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel79, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel27, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(dcPerBirth, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(tfPlaceOfBirth, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(tfRecentAdd, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(tfPerAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tfPerPhone, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(47, 47, 47)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel24)
                    .addComponent(jLabel25)
                    .addComponent(jLabel26, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel20)
                    .addComponent(jLabel23))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(tfEduLevel, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cbReligion, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cbFolk, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cbNation, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel10Layout.createSequentialGroup()
                        .addComponent(rbMarried)
                        .addGap(0, 0, 0)
                        .addComponent(rbSingle))
                    .addComponent(tfPerEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addComponent(lbNote)
                .addContainerGap())
        );

        jPanel10Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel13, jLabel16, jLabel18, jLabel27, jLabel79});

        jPanel10Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel20, jLabel21, jLabel23, jLabel24, jLabel25, jLabel26});

        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(lbNote)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabel16, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(dcPerBirth, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(rbMarried)
                            .addComponent(rbSingle))
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(cbNation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfPlaceOfBirth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel23))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabel24)
                            .addComponent(cbFolk, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel79, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfRecentAdd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabel25)
                            .addComponent(cbReligion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel27, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfPerAdd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(tfEduLevel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel26, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(tfPerPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(jLabel21, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tfPerEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
        );

        jPanel10Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabel13, jLabel16, jLabel18, jLabel27, jLabel79});

        jPanel10Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabel20, jLabel21, jLabel23, jLabel24, jLabel25, jLabel26});

        jPanel10Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {dcPerBirth, tfPlaceOfBirth});

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel10, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(21, 21, 21))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tpInfo.addTab("Thông tin chung", jPanel1);

        jPanel14.setBorder(javax.swing.BorderFactory.createTitledBorder("Thông tin CMND"));

        jLabel1.setText("Số CMND:");

        jLabel2.setText("Nơi cấp:");

        jLabel3.setText("Ngày cấp:");

        dcIDDay.setDateFormatString("dd - MM - yyyy");

        jLabel4.setText("Tỉnh:");

        cbRegion.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbRegion.setActionCommand("9");

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addGap(35, 35, 35)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(tfIDPlace, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfIDNum, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(123, 123, 123)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel14Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(30, 30, 30)
                        .addComponent(dcIDDay, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel14Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(58, 58, 58)
                        .addComponent(cbRegion, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(396, Short.MAX_VALUE))
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(dcIDDay, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfIDNum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(cbRegion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfIDPlace, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder("Thông tin chi trả"));

        jLabel12.setText("Số tài khoản:");

        jLabel19.setText("Ngân hàng:");

        cbBank.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbBank.setActionCommand("10");

        jLabel22.setText("Mã số thuế:");

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addComponent(jLabel22)
                        .addGap(26, 26, 26)
                        .addComponent(tfTaxCode, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addGap(18, 18, 18)
                        .addComponent(tfBankCode, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(120, 120, 120)
                .addComponent(jLabel19)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cbBank, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGap(1, 1, 1)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfBankCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbBank, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(tfTaxCode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel22, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        lbNote1.setText("<html><font color=\"red\">Chú ý:</font> ");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lbNote1, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(850, 850, 850))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbNote1, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(208, Short.MAX_VALUE))
        );

        tpInfo.addTab("Số CMND, TK ngân hàng, MST", jPanel2);

        jPanel13.setBorder(javax.swing.BorderFactory.createTitledBorder("Thông tin"));

        jLabel34.setText("<html><font color = \"red\">(*)</font>Tên bệnh viện:");

        jLabel35.setText("<html><font color = \"red\">(*)</font>Chiều cao (cm):");

        jLabel36.setText("<html><font color = \"red\">(*)</font>Cân nặng (kg):");

        jLabel37.setText("<html><font color = \"red\">(*)</font>Thị lực:");

        jLabel38.setText("Nhóm máu:");

        jLabel39.setText("Tình trạng sức khỏe: ");

        jLabel40.setText("Ngày khám:");

        jLabel46.setText("Ghi chú:");

        dcCheckDate.setDateFormatString("dd - MM - yyyy");

        cbBlood.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbBlood.setActionCommand("11");

        cbHealthStatus.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbHealthStatus.setActionCommand("12");

        lbNote3.setText("Lưu ý:");
        lbNote3.setEnabled(false);

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addGap(67, 67, 67)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel13Layout.createSequentialGroup()
                        .addComponent(jLabel40)
                        .addGap(31, 31, 31)
                        .addComponent(dcCheckDate, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel13Layout.createSequentialGroup()
                        .addComponent(jLabel36, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(tfWeight, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel13Layout.createSequentialGroup()
                        .addComponent(jLabel35, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(tfHeight, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel13Layout.createSequentialGroup()
                        .addComponent(jLabel37, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(5, 5, 5)
                        .addComponent(tfSight, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(78, 78, 78)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel39)
                    .addComponent(jLabel34, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel46, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel38, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel13Layout.createSequentialGroup()
                        .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(tfHospital, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(cbBlood, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(cbHealthStatus, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(29, 29, 29)
                        .addComponent(lbNote3, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(tfHealthNote, javax.swing.GroupLayout.PREFERRED_SIZE, 341, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(111, Short.MAX_VALUE))
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addGap(3, 3, 3)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel34, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel40, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfHospital, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dcCheckDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbNote3))
                .addGap(19, 19, 19)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel36, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfWeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel38)
                    .addComponent(cbBlood, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(tfHeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel39)
                    .addComponent(jLabel35, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbHealthStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(tfHealthNote, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel46)
                    .addComponent(jLabel37, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfSight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        tbHealthStatus.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane5.setViewportView(tbHealthStatus);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane5)
                    .addComponent(jPanel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 285, Short.MAX_VALUE)
                .addContainerGap())
        );

        tpInfo.addTab("Tình trạng sức khỏe", jPanel4);

        tbFamilyInfo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane1.setViewportView(tbFamilyInfo);

        jPanel12.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel17.setText("<html><font color=\"red\">(*) </font>Quan hệ:");

        jLabel28.setText("<html><font color=\"red\">(*) </font>Tên đầy đủ:");

        jLabel30.setText("<html><font color=\"red\">(*) </font>Ngày sinh:");

        cbRelationship.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbRelationship.setActionCommand("13");

        dcBirth.setDateFormatString("dd - MM - yyyy");

        jLabel31.setText("Nghề nghiệp:");

        jLabel32.setText("<html><font color=\"red\">(*) </font>Địa chỉ:");

        jLabel33.setText("Số điện thoại:");

        lbNote4.setText("Chú ý:");

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel12Layout.createSequentialGroup()
                .addGap(76, 76, 76)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel28, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel30, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cbRelationship, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfFullname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dcBirth, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(101, 101, 101)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel31)
                    .addComponent(jLabel32, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel33))
                .addGap(28, 28, 28)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addComponent(tfJob, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(lbNote4))
                    .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(tfAdd, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(tfPhone, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 161, Short.MAX_VALUE)))
                .addContainerGap(282, Short.MAX_VALUE))
        );

        jPanel12Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cbRelationship, dcBirth, tfFullname, tfJob, tfPhone});

        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(cbRelationship, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel31)
                    .addComponent(tfJob, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbNote4))
                .addGap(18, 18, 18)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel28, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfFullname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel32, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfAdd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel30, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dcBirth, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel33)
                    .addComponent(tfPhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(48, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        tpInfo.addTab("Thông tin gia đình", jPanel5);

        jPanel15.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel41.setText("Loại học vấn:");

        jLabel42.setText("Từ năm:");

        jLabel43.setText("Đến năm (Năm tốt nghiệp):");

        jLabel44.setText("Loại tốt nghiệp:");

        jLabel45.setText("Tên trường học:");

        jLabel47.setText("Tên khóa học:");

        cbCertification.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbCertification.setActionCommand("15");

        cbKindOfEdu.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbKindOfEdu.setActionCommand("14");

        ycToYear.setMaximumSize(new java.awt.Dimension(48, 20));

        javax.swing.GroupLayout jPanel15Layout = new javax.swing.GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel15Layout.createSequentialGroup()
                        .addGap(56, 56, 56)
                        .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel15Layout.createSequentialGroup()
                                .addComponent(jLabel44, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(41, 41, 41)
                                .addComponent(cbCertification, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel15Layout.createSequentialGroup()
                                .addComponent(jLabel47, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(30, 30, 30)
                                .addComponent(tfCourseName, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel15Layout.createSequentialGroup()
                                .addComponent(jLabel41, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(42, 42, 42)
                                .addComponent(cbKindOfEdu, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(69, 69, 69)
                        .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel42, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel43)
                            .addComponent(jLabel45, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(30, 30, 30)
                        .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ycToYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ycFromYear, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel15Layout.createSequentialGroup()
                        .addGap(591, 591, 591)
                        .addComponent(tfSchool, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel15Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {ycFromYear, ycToYear});

        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(cbKindOfEdu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ycFromYear, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel41)
                    .addComponent(jLabel42, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel43, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel47)
                    .addComponent(ycToYear, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfCourseName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 22, 22)
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel44)
                    .addComponent(jLabel45)
                    .addComponent(tfSchool, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbCertification, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        jPanel15Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {ycFromYear, ycToYear});

        tbEducation.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        tbEducation.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane2.setViewportView(tbEducation);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1024, Short.MAX_VALUE)
                    .addComponent(jPanel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 317, Short.MAX_VALUE)
                .addContainerGap())
        );

        tpInfo.addTab("Học vấn", jPanel6);

        jPanel16.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        jLabel48.setText("Kỹ năng:");

        lbNote5.setText("Chú ý");
        lbNote5.setEnabled(false);

        jLabel53.setText("Xếp loại:");

        jLabel58.setText("Ghi chú:");

        dcEffectiveDate.setDateFormatString("dd - MM - yyyy");

        cbSkill.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbSkill.setActionCommand("16");

        cbRank.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbRank.setActionCommand("17");

        jLabel50.setText("Ngày hiệu lực");

        javax.swing.GroupLayout jPanel16Layout = new javax.swing.GroupLayout(jPanel16);
        jPanel16.setLayout(jPanel16Layout);
        jPanel16Layout.setHorizontalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addGap(79, 79, 79)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel16Layout.createSequentialGroup()
                        .addComponent(jLabel58)
                        .addGap(50, 50, 50)
                        .addComponent(tfSkillNote))
                    .addGroup(jPanel16Layout.createSequentialGroup()
                        .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanel16Layout.createSequentialGroup()
                                .addComponent(jLabel50)
                                .addGap(18, 18, 18)
                                .addComponent(dcEffectiveDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel16Layout.createSequentialGroup()
                                .addComponent(jLabel48)
                                .addGap(47, 47, 47)
                                .addComponent(cbSkill, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(91, 91, 91)
                        .addComponent(jLabel53)))
                .addGap(18, 18, 18)
                .addComponent(cbRank, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39)
                .addComponent(lbNote5)
                .addContainerGap(326, Short.MAX_VALUE))
        );

        jPanel16Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cbRank, cbSkill});

        jPanel16Layout.setVerticalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel48)
                    .addComponent(jLabel53)
                    .addComponent(cbSkill, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cbRank, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbNote5, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(dcEffectiveDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel50, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(tfSkillNote, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel58))
                .addContainerGap(13, Short.MAX_VALUE))
        );

        tbSkill.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        tbSkill.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane3.setViewportView(tbSkill);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane3)
                    .addComponent(jPanel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 318, Short.MAX_VALUE)
                .addContainerGap())
        );

        tpInfo.addTab("Thông tin kỹ năng", jPanel7);

        jPanel19.setBorder(javax.swing.BorderFactory.createTitledBorder("Thông tin công ty"));

        jLabel52.setText("Tên công ty:");

        jLabel59.setText("Chức danh:");

        jLabel60.setText("Mô tả công việc:");

        jLabel61.setText("Từ ngày:");

        jLabel62.setText("Đến ngày:");

        dcExpStartDate.setDateFormatString("dd - MM - yyyy");

        dcExpQuitDate.setDateFormatString("dd - MM - yyyy");

        jLabel29.setText("Lí do nghỉ việc:");

        lbNote6.setText("Chú ý");
        lbNote6.setEnabled(false);

        javax.swing.GroupLayout jPanel19Layout = new javax.swing.GroupLayout(jPanel19);
        jPanel19.setLayout(jPanel19Layout);
        jPanel19Layout.setHorizontalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel19Layout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel52, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel59, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel60, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel61, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tfDescribeJob, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dcExpStartDate, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfCompName, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfExpPos, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel62, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel29))
                .addGap(27, 27, 27)
                .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(dcExpQuitDate, javax.swing.GroupLayout.DEFAULT_SIZE, 183, Short.MAX_VALUE)
                    .addComponent(tfReason))
                .addGap(18, 18, 18)
                .addComponent(lbNote6)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel19Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel52, jLabel59, jLabel60, jLabel61});

        jPanel19Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {dcExpQuitDate, dcExpStartDate});

        jPanel19Layout.setVerticalGroup(
            jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel19Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(tfCompName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel29)
                    .addComponent(jLabel52)
                    .addComponent(tfReason, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbNote6, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel59)
                    .addComponent(tfExpPos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(tfDescribeJob, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel60))
                .addGap(21, 21, 21)
                .addGroup(jPanel19Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel61)
                    .addComponent(jLabel62)
                    .addComponent(dcExpStartDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dcExpQuitDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        jPanel19Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabel52, jLabel59, jLabel60, jLabel61});

        jPanel20.setBorder(javax.swing.BorderFactory.createTitledBorder("Thông tin người liên hệ"));
        jPanel20.setToolTipText("");

        jLabel64.setText("Tên đầy đủ:");

        jLabel65.setText("Chức vụ:");

        jLabel66.setText("Email:");

        jLabel67.setText("Số điện thoại:");

        javax.swing.GroupLayout jPanel20Layout = new javax.swing.GroupLayout(jPanel20);
        jPanel20.setLayout(jPanel20Layout);
        jPanel20Layout.setHorizontalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel20Layout.createSequentialGroup()
                .addGap(99, 99, 99)
                .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel64, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel65, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tfRefereeName, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfRefereePos, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(53, 53, 53)
                .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel66, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel67, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tfRefereeEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(tfRefereePhone, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(109, 109, 109))
        );
        jPanel20Layout.setVerticalGroup(
            jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel20Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(tfRefereeEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel66)
                    .addComponent(tfRefereeName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel64))
                .addGap(21, 21, 21)
                .addGroup(jPanel20Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel65)
                    .addComponent(tfRefereePhone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel67)
                    .addComponent(tfRefereePos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tbExpList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane4.setViewportView(tbExpList);

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane4)
                    .addComponent(jPanel20, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel19, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel19, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel20, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 153, Short.MAX_VALUE)
                .addContainerGap())
        );

        tpInfo.addTab("Kinh nghiệm làm việc", jPanel8);

        jPanel21.setBorder(javax.swing.BorderFactory.createTitledBorder("Thông tin"));

        jLabel68.setText("Tên tài liệu:");

        jLabel69.setText("Ngày lưu:");

        jLabel70.setText("Loại tài liệu:");

        jLabel72.setText("Đường dẫn:");

        jLabel73.setText("Thông tin:");

        btFileChooser.setText("...");
        btFileChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btFileChooserActionPerformed(evt);
            }
        });

        dcSaveDate.setDateFormatString("dd - MM - yyyy");

        cbKindofDoc.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbKindofDoc.setActionCommand("18");

        lbNote7.setText("Chú ý");
        lbNote7.setEnabled(false);

        javax.swing.GroupLayout jPanel21Layout = new javax.swing.GroupLayout(jPanel21);
        jPanel21.setLayout(jPanel21Layout);
        jPanel21Layout.setHorizontalGroup(
            jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel21Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel68, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel69, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(dcSaveDate, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(tfDocName, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 149, Short.MAX_VALUE))
                .addGap(108, 108, 108)
                .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel70, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel72, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel73, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(tfDocLink, javax.swing.GroupLayout.DEFAULT_SIZE, 214, Short.MAX_VALUE)
                    .addComponent(tfDocInfo, javax.swing.GroupLayout.DEFAULT_SIZE, 214, Short.MAX_VALUE)
                    .addComponent(cbKindofDoc, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel21Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(btFileChooser))
                    .addGroup(jPanel21Layout.createSequentialGroup()
                        .addGap(83, 83, 83)
                        .addComponent(lbNote7)))
                .addContainerGap(213, Short.MAX_VALUE))
        );
        jPanel21Layout.setVerticalGroup(
            jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel21Layout.createSequentialGroup()
                .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                        .addComponent(tfDocName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel68)
                        .addComponent(jLabel70)
                        .addComponent(cbKindofDoc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lbNote7, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(tfDocLink, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel72)
                    .addComponent(btFileChooser)
                    .addComponent(dcSaveDate, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel69))
                .addGap(21, 21, 21)
                .addGroup(jPanel21Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(tfDocInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel73))
                .addGap(0, 16, Short.MAX_VALUE))
        );

        tbDocument.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        jScrollPane6.setViewportView(tbDocument);

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel21, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane6))
                .addGap(13, 13, 13))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel21, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 319, Short.MAX_VALUE)
                .addContainerGap())
        );

        tpInfo.addTab("Lưu trữ tài liệu", jPanel9);

        btSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/toolbar/Save.png"))); // NOI18N
        btSave.setText("Lưu");
        btSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSaveActionPerformed(evt);
            }
        });

        btUndo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/toolbar/Undo.png"))); // NOI18N
        btUndo.setText("Làm lại");
        btUndo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btUndoActionPerformed(evt);
            }
        });

        btDel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/toolbar/Delete.png"))); // NOI18N
        btDel.setText("Xóa");
        btDel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btDelActionPerformed(evt);
            }
        });

        btAdd.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/toolbar/Add.png"))); // NOI18N
        btAdd.setText("Thêm");
        btAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btAddActionPerformed(evt);
            }
        });

        btOpenFile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/toolbar/Files.png"))); // NOI18N
        btOpenFile.setText("Mở File");
        btOpenFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btOpenFileActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btSave, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btDel, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btUndo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btOpenFile)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(tpInfo, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(tpInfo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btDel)
                        .addComponent(btAdd)
                        .addComponent(btUndo)
                        .addComponent(btOpenFile))
                    .addComponent(btSave))
                .addContainerGap())
        );

        tpInfo.getAccessibleContext().setAccessibleName("Số CMND, TK ngân hàng, MST");
    }// </editor-fold>//GEN-END:initComponents

    private void btSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSaveActionPerformed
        insertDetails(getMode());
    }//GEN-LAST:event_btSaveActionPerformed

    private void btAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btAddActionPerformed
        int tab = tpInfo.getSelectedIndex();
        String ID = tfPersonnelID.getText();
        switch (tab) {
            case 2:
                insertHealth(ID);
                break;
            case 3:
                insertFamily(ID);
                break;
            case 4:
                insertEducation(ID);
                break;
            case 5:
                insertSkill(ID);
                break;
            case 6:
                insertExperience(ID);
                break;
            case 7:
                insertDocument(ID);
                break;
        }
    }//GEN-LAST:event_btAddActionPerformed

    private void tpInfoStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_tpInfoStateChanged
        int tab = tpInfo.getSelectedIndex();
        switch (tab) {
            case 0:
                btSave.setVisible(true);
                btDel.setVisible(true);
                btAdd.setVisible(false);
                btOpenFile.setVisible(false);
                break;
            case 1:
                if (!checkID()) {
                    return;
                }
                btSave.setVisible(true);
                btDel.setVisible(true);     //sửa lại tab thứ 2 chung với tab 1
                btAdd.setVisible(false);
                btOpenFile.setVisible(false);
                break;
            case 2:
                if (!checkID()) {
                    return;
                }
                btSave.setVisible(false);
                btDel.setVisible(true);
                btAdd.setVisible(true);
                btOpenFile.setVisible(false);
                break;
            case 3:
                if (!checkID()) {
                    return;
                }
                btSave.setVisible(false);
                btDel.setVisible(true);
                btAdd.setVisible(true);
                btOpenFile.setVisible(false);
                break;
            case 4:
                if (!checkID()) {
                    return;
                }
                btSave.setVisible(false);
                btDel.setVisible(true);
                btAdd.setVisible(true);
                btOpenFile.setVisible(false);
                break;
            case 5:
                if (!checkID()) {
                    return;
                }
                btSave.setVisible(false);
                btDel.setVisible(true);
                btAdd.setVisible(true);
                btOpenFile.setVisible(false);
                break;
            case 6:
                if (!checkID()) {

                    return;
                }
                btSave.setVisible(false);
                btDel.setVisible(true);
                btAdd.setVisible(true);
                btOpenFile.setVisible(false);
                break;
            case 7:
                if (!checkID()) {
                    return;
                }
                btSave.setVisible(false);
                btDel.setVisible(true);
                btAdd.setVisible(true);
                btOpenFile.setVisible(true);
                break;
        }
    }//GEN-LAST:event_tpInfoStateChanged

    private void btFileChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btFileChooserActionPerformed
        showFileChooser(2);
    }//GEN-LAST:event_btFileChooserActionPerformed

    private void btOpenFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btOpenFileActionPerformed
        showFileChooser(3);
    }//GEN-LAST:event_btOpenFileActionPerformed

    private void btDelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btDelActionPerformed
        switch (tpInfo.getSelectedIndex()) {
            case 0:
            case 1:
                int choice = JOptionPane.showConfirmDialog(null, "Bạn có chắc muốn xóa toàn bộ dữ liệu về nhân viên này không", "Xác nhận", JOptionPane.YES_NO_OPTION);
                if (choice == JOptionPane.YES_OPTION) {
                    deletePersonnelInfo();
                }
                break;
            case 2:
                deleteFromTable(tpInfo.getSelectedIndex(), tbHealthStatus);
                break;
            case 3:
                deleteFromTable(tpInfo.getSelectedIndex(), tbFamilyInfo);
                break;
            case 4:
                deleteFromTable(tpInfo.getSelectedIndex(), tbEducation);
                break;
            case 5:
                deleteFromTable(tpInfo.getSelectedIndex(), tbSkill);
                break;
            case 6:
                deleteFromTable(tpInfo.getSelectedIndex(), tbExpList);
                break;
            case 7:
                deleteFromTable(tpInfo.getSelectedIndex(), tbDocument);
                break;
        }
    }//GEN-LAST:event_btDelActionPerformed

    private void btUndoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btUndoActionPerformed
        switch (getMode()) {
            // Thêm mới
            case 1:
                break;
            // Chỉnh sửa
            case 2:
                break;
        }
    }//GEN-LAST:event_btUndoActionPerformed

    public void loadComboBox() {
        loadList(cbStatus, pDAO.getSTATUS_CB());
        loadList(cbKind, pDAO.getKIND_CB());
        loadList(cbPosition, pDAO.getPOSITION_CB());
        loadList(cbOffice, pDAO.getOFFICE_CB());
        loadList(cbContract, pDAO.getCONTRACT_CB());
        loadList(cbNation, pDAO.getNATION_CB());
        loadList(cbFolk, pDAO.getFOLK_CB());
        loadList(cbReligion, pDAO.getRELIGION_CB());
        loadList(cbRegion, pDAO.getREGION_CB());
        loadList(cbBank, pDAO.getBANK_CB());
        loadList(cbRelationship, pDAO.getRELATION_CB());
        loadList(cbKindOfEdu, pDAO.getKIND_OF_EDU_CB());
        loadList(cbCertification, pDAO.getCERTIFICATION_CB());
        loadList(cbSkill, pDAO.getSKILL_CB());
        loadList(cbRank, pDAO.getSKILL_LEVEL_CB());
        loadList(cbBlood, pDAO.getBLOOD_CB());
        loadList(cbHealthStatus, pDAO.getHEALTH_STATUS_CB());
        loadList(cbKindofDoc, pDAO.getKIND_OF_DOC_CB());
    }

    public void loadList(JComboBox cbox, String tbl) {
        cbox.removeAllItems();
        cbox.addItem("");
        ArrayList<ComboBoxItems> list = pDAO.getList(tbl);
        if (!list.isEmpty()) {
            list.stream().forEach(cbox::addItem);
        }
        cbox.addItem("(NEW)");
    }

    private void chooseFromComboBox(JComboBox cbox, short ID) {

        for (int i = 0; i < cbox.getItemCount(); i++) {
            if (cbox.getItemAt(i) instanceof ComboBoxItems) {
                ComboBoxItems cItem = (ComboBoxItems) cbox.getItemAt(i);
                if (cItem.getID() == ID) {
                    cbox.setSelectedIndex(i);
                    break;
                }
            }
        }
    }

    private short getKindID(JComboBox cbox) {
        if (cbox.getSelectedItem() instanceof ComboBoxItems) {
            ComboBoxItems cItem = (ComboBoxItems) cbox.getSelectedItem();
            return cItem.getID();
        }
        return -1;
    }

    private String getKindName(JComboBox cbox, short ID) {
        ComboBoxItems cItem;
        String name = "";
        for (int i = 1; i < cbox.getItemCount() - 1; i++) {
            cItem = (ComboBoxItems) cbox.getItemAt(i);
            if (cItem.getID() == ID) {
                name = cItem.getName();
                break;
            }
        }
        return name;
    }

    private void setInfoTab(PersonnelDetails pDetails) {
        tfPersonnelID.setText(pDetails.getPersonnelID());
        tfPersonnelID.setEditable(false);
        tfLastName.setText(pDetails.getlName());
        tfFirstName.setText(pDetails.getfName());
        dcEnterDate.setDate(pDetails.getEnterDate());
        chooseFromComboBox(cbStatus, pDetails.getStatusID());
        dcStartDate.setDate(pDetails.getStartDate());
        dcEndTrainingDate.setDate(pDetails.getEndTraining());
        tfCompEmail.setText(pDetails.getCompEmail());
        tfNickname.setText(pDetails.getNickName());
        if (pDetails.getPic() != null) {
            ImageIcon img = new ImageIcon(pDetails.getPic());
            Image img1 = img.getImage().getScaledInstance(150, 200, Image.SCALE_SMOOTH);
            lbPicture.setText("");
            lbPicture.setIcon(new ImageIcon(img1));
        } else {
            delPic();
        }
        if (pDetails.isSex()) {
            rbMale.setSelected(true);
        } else {
            rbFemale.setSelected(true);
        }
        chooseFromComboBox(cbKind, pDetails.getKindID());
        chooseFromComboBox(cbPosition, pDetails.getPosID());
        chooseFromComboBox(cbOffice, pDetails.getOfficeID());
        chooseFromComboBox(cbContract, pDetails.getContractID());

        dcPerBirth.setDate(pDetails.getBirth());
        tfPlaceOfBirth.setText(pDetails.getPlaceOB());
        tfRecentAdd.setText(pDetails.getRecentAdd());
        tfPerAdd.setText(pDetails.getAdd());
        tfPerPhone.setText(pDetails.getPhoneNum());
        if (pDetails.isMariage()) {
            rbMarried.setSelected(true);
        } else {
            rbSingle.setSelected(true);
        }
        chooseFromComboBox(cbNation, pDetails.getNationID());
        chooseFromComboBox(cbFolk, pDetails.getFolkID());
        chooseFromComboBox(cbReligion, pDetails.getReligionID());
        chooseFromComboBox(cbRegion, pDetails.getRegionID());
        chooseFromComboBox(cbBank, pDetails.getBankID());

        tfEduLevel.setText(pDetails.getEducation());
        tfPerEmail.setText(pDetails.getPersonalEmail());

        tfIDNum.setText(pDetails.getIDNum());
        tfIDPlace.setText(pDetails.getIDPlace());
        dcIDDay.setDate(pDetails.getIDDay());
        tfBankCode.setText(pDetails.getBankCode());
        tfTaxCode.setText(pDetails.getTaxCode());
    }

    private void loadHealthStatusTable(ArrayList<HealthStatus> healthList) {
        DefaultTableModel model = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int rowIndex, int mColIndex) {
                return false;
            }
        };
        tbHealthStatus.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tbHealthStatus.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
        tbHealthStatus.getTableHeader().setReorderingAllowed(false);
        Object[] column = {"Ngày khám", "Tên bệnh viện", "Chiều cao", "Cân nặng", "Nhóm máu", "Thị lực",
            "Tình trạng sức khỏe", "Ghi chú"};
        model.setColumnIdentifiers(column);
        ArrayList<String> rowData = new ArrayList<>();
        for (HealthStatus healthList1 : healthList) {
            healthID.add(healthList1.getID_IDENTITY());
            rowData.add(DateTime.convertDate(healthList1.getHealDate()));
            rowData.add(healthList1.getHospital());
            rowData.add(healthList1.getHeight() + "");
            rowData.add(healthList1.getWeight() + "");
            rowData.add(cbBlood.getItemAt(healthList1.getBloodID()).toString());
            rowData.add(healthList1.getSight());
            rowData.add(cbHealthStatus.getItemAt(healthList1.getHealthStatusID()).toString());
            rowData.add(healthList1.getNote());

            model.addRow(rowData.toArray());
            rowData.clear();
        }
        tbHealthStatus.setModel(model);
    }

    private void loadFamilyInfoTable(ArrayList<FamilyDetails> familyList) {
        DefaultTableModel model = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int rowIndex, int mColIndex) {
                return false;
            }
        };
        tbFamilyInfo.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tbFamilyInfo.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
        tbFamilyInfo.getTableHeader().setReorderingAllowed(false);
        Object[] column = {"Quan hệ", "Họ tên", "Ngày sinh", "Nghề nghiệp", "Địa chỉ", "Số điện thoại"};
        model.setColumnIdentifiers(column);
        ArrayList<String> rowData = new ArrayList<>();
        for (FamilyDetails familyList1 : familyList) {
            familyID.add(familyList1.getID_IDENTITY());
//            System.out.println(familyList1.getID_IDENTITY());
            rowData.add(cbRelationship.getItemAt(familyList1.getRelationID()).toString());
            rowData.add(familyList1.getPerName());
            rowData.add(DateTime.convertDate(familyList1.getPerBirth()));
            rowData.add(familyList1.getPerJob());
            rowData.add(familyList1.getPerAdd());
            rowData.add(familyList1.getPerPhone());
            model.addRow(rowData.toArray());
            rowData.clear();
        }
        tbFamilyInfo.setModel(model);
    }

    private void loadEducationTable(ArrayList<Education> eduList) {
        DefaultTableModel model = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int rowIndex, int mColIndex) {
                return false;
            }
        };
        tbEducation.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tbEducation.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
        tbEducation.getTableHeader().setReorderingAllowed(false);
        Object[] column = {"Loại học vấn", "Tên khóa học", "Thời gian", "Tên trường đào tạo", "Tốt nghiệp loại"};
        model.setColumnIdentifiers(column);
        ArrayList<String> rowData = new ArrayList<>();
        for (Education eduList1 : eduList) {
            eduID.add(eduList1.getID_IDENTITY());
            rowData.add(cbKindOfEdu.getItemAt(eduList1.getKindID()).toString());
            rowData.add(eduList1.getCourseName());
            rowData.add(eduList1.getFromYear() + " - " + eduList1.getToYear());
            rowData.add(eduList1.getSchoolName());
            rowData.add(cbCertification.getItemAt(eduList1.getGraduationID()).toString());
            model.addRow(rowData.toArray());
            rowData.clear();
        }
        tbEducation.setModel(model);
    }

    private void loadSkillTable(ArrayList<Skill> skillList) {
        DefaultTableModel model = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int rowIndex, int mColIndex) {
                return false;
            }
        };
        tbSkill.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tbSkill.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
        tbSkill.getTableHeader().setReorderingAllowed(false);
        Object[] column = {"Kỹ năng", "Xếp loại", "Ngày hiệu lực", "Ghi chú"};
        model.setColumnIdentifiers(column);
        ArrayList<String> rowData = new ArrayList<>();
        for (Skill skillList1 : skillList) {
            skillID.add(skillList1.getID_IDENTITY());
            rowData.add(cbSkill.getItemAt(skillList1.getNameID()).toString());
            rowData.add(cbRank.getItemAt(skillList1.getClassificationID()).toString());
            rowData.add(DateTime.convertDate(skillList1.getEffectiveDate()));
            rowData.add(skillList1.getNote());

            model.addRow(rowData.toArray());
            rowData.clear();
        }
        tbSkill.setModel(model);
    }

    private void loadExpTable(ArrayList<Experience> expList) {
        DefaultTableModel model = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int rowIndex, int mColIndex) {
                return false;
            }
        };
        tbExpList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tbExpList.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
        tbExpList.getTableHeader().setReorderingAllowed(false);
        Object[] column = {"Tên công ty", "Chức vụ", "Công việc", "Ngày bắt đầu", "Ngày nghỉ việc",
            "Lí do nghỉ việc", "Người đại diện", "Chức vụ NĐD", "Số điện thoại", "Email"};
        model.setColumnIdentifiers(column);
        ArrayList<String> rowData = new ArrayList<>();
        for (Experience expList1 : expList) {
            expID.add(expList1.getID_IDENTITY());
            rowData.add(expList1.getCompName());
            rowData.add(expList1.getPos());
            rowData.add(expList1.getJob());
            rowData.add(DateTime.convertDate(expList1.getStartDate()));
            rowData.add(DateTime.convertDate(expList1.getEndDate()));
            rowData.add(expList1.getReason());
            rowData.add(expList1.getReferName());
            rowData.add(expList1.getReferPos());
            rowData.add(expList1.getReferPhone());
            rowData.add(expList1.getReferEmail());
            model.addRow(rowData.toArray());
            rowData.clear();
        }
        tbExpList.setModel(model);
    }

    private void loadDocTable(ArrayList<DocumentsDetails> docList) {
        DefaultTableModel model = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int rowIndex, int mColIndex) {
                return false;
            }
        };
        tbExpList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tbExpList.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
        tbExpList.getTableHeader().setReorderingAllowed(false);
        Object[] column = {"Tên tài liệu", "Loại tài liệu", "Ngày lưu", "File"};
        model.setColumnIdentifiers(column);
        ArrayList<String> rowData = new ArrayList<>();
        for (DocumentsDetails docList1 : docList) {
            docID.add(docList1.getID_IDENTITY());
            rowData.add(docList1.getName());
            String kindName = getKindName(cbKindofDoc, docList1.getKindID());
            rowData.add(kindName);
            rowData.add(DateTime.convertDate(docList1.getSaveDate()));
            String docFileName = tfPersonnelID.getText() + "_" + docList1.getName() + "(" + kindName + ")." + docList1.getExtension();
            rowData.add(docFileName);
            perFile.add(docList1.getFile());

            model.addRow(rowData.toArray());
            rowData.clear();
        }
        tbDocument.setModel(model);
    }

    private void setPopupMenu(JPanel pnPicture) {
        picPopupMenu = new JPopupMenu();
        JMenuItem miLoad = new JMenuItem("Load");
        JSeparator separator = new JSeparator();
        JMenuItem miDelete = new JMenuItem("Delete");

        miLoad.addActionListener((ActionEvent e) -> {
            showFileChooser(1);
        });

        miDelete.addActionListener((ActionEvent e) -> {
            delPic();
        });

        picPopupMenu.add(miLoad);
        picPopupMenu.add(separator);
        picPopupMenu.add(miDelete);

        pnPicture.setComponentPopupMenu(picPopupMenu);
    }

    private void showFileChooser(int mode) {
        JFileChooser fileChooser = new JFileChooser();
        int result;
        switch (mode) {
            case 1:
                fileChooser.setDialogTitle("Chọn một ảnh nhân viên");
                fileChooser.setMultiSelectionEnabled(false);
                fileChooser.setFileFilter(new FileTypeFilter(".png", "PNG"));
                fileChooser.setFileFilter(new FileTypeFilter(".gif", "GIF"));
                fileChooser.setFileFilter(new FileTypeFilter(".jpg", "JPG"));
                result = fileChooser.showOpenDialog(this);
                if (result == JFileChooser.APPROVE_OPTION) {
                    try {
                        File selectedFile = fileChooser.getSelectedFile();
                        BufferedImage img = ImageIO.read(selectedFile);
                        Image img1 = img.getScaledInstance(150, 200, Image.SCALE_SMOOTH);
                        ImageIcon imgi = new ImageIcon(img1);
                        lbPicture.setText("");
                        lbPicture.setIcon(imgi);
                        convertImage(selectedFile.getAbsolutePath());
                    } catch (IOException ex) {
                        Logger.getLogger(PanelInfo.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                break;
            case 2:
                fileChooser.setDialogTitle("Chọn một File");
                fileChooser.setMultiSelectionEnabled(false);
                fileChooser.setFileFilter(new FileTypeFilter(".png", "PNG"));
                fileChooser.setFileFilter(new FileTypeFilter(".gif", "GIF"));
                fileChooser.setFileFilter(new FileTypeFilter(".jpg", "JPG"));
                fileChooser.setFileFilter(new FileTypeFilter(".docx", "DOCX"));
                fileChooser.setFileFilter(new FileTypeFilter(".doc", "DOC"));
                fileChooser.setFileFilter(new FileTypeFilter(".pdf", "PDF"));

                result = fileChooser.showOpenDialog(this);
                if (result == JFileChooser.APPROVE_OPTION) {
                    File docFile = fileChooser.getSelectedFile();
                    tfDocLink.setText(docFile.getAbsolutePath());
                    convertFile(docFile.getAbsolutePath());
                    int ext = docFile.getName().lastIndexOf('.');
                    setFileExtension(docFile.getName().substring(ext + 1));
                }
                break;
            case 3:
                byte[] fileData = null;
                String fileName = "";
                try {
                    int row = tbDocument.getSelectedRow();
                    fileData = perFile.get(row);
                    fileName = tbDocument.getValueAt(row, 3).toString();
                } catch (NullPointerException ex) {
                    JOptionPane.showMessageDialog(this, "Bạn phải chọn một file trong bảng trên", "Lỗi", JOptionPane.ERROR_MESSAGE);
                }
                fileChooser.setDialogTitle("Lưu file");
                fileChooser.setFileFilter(new FileTypeFilter(".png", "PNG"));
                fileChooser.setFileFilter(new FileTypeFilter(".gif", "GIF"));
                fileChooser.setFileFilter(new FileTypeFilter(".jpg", "JPG"));
                fileChooser.setFileFilter(new FileTypeFilter(".docx", "DOCX"));
                fileChooser.setFileFilter(new FileTypeFilter(".doc", "DOC"));
                fileChooser.setFileFilter(new FileTypeFilter(".pdf", "PDF"));
                fileChooser.setSelectedFile(new File(fileName));
                result = fileChooser.showSaveDialog(this);
                if (result == JFileChooser.APPROVE_OPTION) {
                    File docFile = fileChooser.getSelectedFile();
                    try {
                        docFile.createNewFile();
                        try (FileOutputStream fos = new FileOutputStream(docFile)) {
                            fos.write(fileData, 0, fileData.length);
                        }
                        int choice = JOptionPane.showConfirmDialog(this, "Bạn có muốn mở file đã lưu không?", "Mở file", JOptionPane.YES_NO_OPTION);
                        if (choice == JOptionPane.YES_OPTION) {
                            openDocumentFile(docFile.getAbsolutePath());
                        }
                    } catch (IOException | NullPointerException ex) {
                        Logger.getLogger(PanelInfo.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                break;
        }
    }

    private void insertDetails(int mode) {
        // check = true thì insert, 
        // check = false thì nhập lại
        boolean check = true;

        // Hiển thị các lỗi người dùng
        String note = "<html><font color=\"red\">";
        PersonnelDetails pd = new PersonnelDetails();
        pd.setPersonnelID(tfPersonnelID.getText());
        // Kiểm tra tên việt nam
        if (Check.checkStringVN(tfLastName.getText(), true)) {
            pd.setlName(tfLastName.getText());
        } else {
            note += "<br>* Họ đệm " + Message.NAME_VI;
            check = false;
        }
        if (Check.checkStringVN(tfFirstName.getText(), true)) {
            pd.setfName(tfFirstName.getText().trim());
        } else {
            note += "<br>* Tên " + Message.NAME_VI;
            check = false;
        }
        pd.setNickName(tfNickname.getText().trim());
        pd.setStatusID(getKindID(cbStatus));
        pd.setKindID(getKindID(cbKind));
        pd.setContractID(getKindID(cbContract));
        pd.setPosID(getKindID(cbPosition));
        pd.setOfficeID(getKindID(cbOffice));

        if (dcEnterDate.getDate() == null) {
            note += "<br>* Ngày vào công ty" + Message.DATE;
            check = false;
        } else {
            pd.setEnterDate(DateTime.convertDate(dcEnterDate.getDate()));
        }
        if (dcStartDate.getDate() == null) {
            note += "<br>* Ngày bắt đầu" + Message.DATE;
            check = false;
        } else {
            pd.setStartDate(DateTime.convertDate(dcStartDate.getDate()));
        }
        if (rbMale.isSelected()) {
            pd.setSex(true);
        } else {
            pd.setSex(true);
        }

        if (!Check.checkPhone(tfPerPhone.getText().trim())) {
            note += "<br>* Ngày bắt đầu" + Message.DATE;
            check = false;
        } else {
            pd.setPhoneNum(tfPerPhone.getText());
        }
        if (!Check.checkEmail(tfCompEmail.getText().trim())) {
            note += "<br>* Email công ty" + Message.EMAIL;
            check = false;
        } else {
            pd.setCompEmail(tfCompEmail.getText().trim());
        }
        if (dcEndTrainingDate.getDate() == null) {
            note += "<br>* Ngày kết thúc thử việc" + Message.DATE;
            check = false;
        } else {
            pd.setEndTraining(DateTime.convertDate(dcEndTrainingDate.getDate()));
        }
        if (dcPerBirth.getDate() == null) {
            note += "<br>* Ngày sinh" + Message.DATE;
            check = false;
        } else {
            pd.setBirth(DateTime.convertDate(dcPerBirth.getDate()));
        }
        if (!Check.checkString(tfPlaceOfBirth.getText().trim())) {
            note += "<br>* Nguyên quán " + Message.EMPTY;
            check = false;
        } else {
            pd.setPlaceOB(tfPlaceOfBirth.getText().trim());
        }
        if (!Check.checkString(tfRecentAdd.getText().trim())) {
            note += "<br>* Thường trú " + Message.EMPTY;
            check = false;
        } else {
            pd.setRecentAdd(tfRecentAdd.getText().trim());
        }
        pd.setFolkID(getKindID(cbFolk));
        pd.setReligionID(getKindID(cbReligion));
        pd.setNationID(getKindID(cbNation));
        if (!Check.checkEmail(tfPerEmail.getText().trim())) {
            note += "<br>* Email cá nhân " + Message.EMAIL;
            check = false;
        } else {
            pd.setPersonalEmail(tfPerEmail.getText().trim());
        }
        if (bgMarried.getSelection().getActionCommand().equals("Đã kết hôn")) {
            pd.setMariage(true);
        }
        if (bgSex.getSelection().getActionCommand().equals("Độc thân")) {
            pd.setMariage(false);
        }
        if (tfEduLevel.getText().trim().isEmpty()) {
            note += "<br>* Trình độ văn hóa " + Message.EMPTY;
            check = false;
        } else {
            pd.setEducation(tfEduLevel.getText());
        }

        // Tab 2
        boolean check2 = true;
        String note2 = "<html><font color=\"red\">";
        pd.setAdd(tfAdd.getText().trim());
        if (!Check.checkPhone(tfIDNum.getText().trim())) {
            note2 += "<br>* Số CMT " + Message.PHONE;
            check2 = false;
        } else {
            pd.setIDNum(tfIDNum.getText().trim());
        }
        if (dcIDDay.getDate() == null) {
            note2 += "<br>* Ngày cấp" + Message.DATE;
            check2 = false;
        } else {
            pd.setIDDay(DateTime.convertDate(dcIDDay.getDate()));
        }
        pd.setRegionID(getKindID(cbRegion));
        pd.setBankCode(tfBankCode.getText());
        pd.setBankID(getKindID(cbBank));
        pd.setIDPlace(tfIDPlace.getText());
        pd.setTaxCode(tfTaxCode.getText());
        pd.setPic(this.getPersonnelImage());
        if (!check) {
            note += "</font>";
            Dialog.showMsg(Message.OPTION_ERROR, 0);
            lbNote.setText(note);
            tpInfo.setSelectedIndex(0);
            return;
        } else {
            if (!check2) {
                note2 += "</font>";
                Dialog.showMsg(Message.OPTION_ERROR, 0);
                lbNote1.setText(note2);
                tpInfo.setSelectedIndex(1);
                return;
            } else {
                switch (mode) {
                    // Thêm mới nhân viên
                    case 1:
                        PersonnelDetails pd1 = pDAO.getPersonnelDetails(tfPersonnelID.getText());
                        if (pd1.getPersonnelID() == null) {
                            if (pDAO.insertPersonnelDetails(pd)) {
                                new UnionDAO().insertUnion(pd.getPersonnelID());
                                Dialog.showMsg("Thêm mới thành công", 1);
                            }
                        } else {
                            if (pDAO.updatePersonnelDetails(pd)) {
                                Dialog.showMsg("Lưu thông tin thành công", 1);
                            }
                        }
                        break;
                    case 2:
                        if (pDAO.updatePersonnelDetails(pd)) {
                            Dialog.showMsg("Lưu thông tin thành công", 1);
                        }
                        break;
                }
            }
        }
        lbNote.setEnabled(false);
    }

    private void insertHealth(String personnelID) {
        HealthStatus hs = new HealthStatus();
        String note = "<html><font color=\"red\">";
        boolean check = true;
        if (dcCheckDate.getDate() == null) {
            note += "<br>* Ngày khám " + Message.DATE;
            check = false;
        } else {
            hs.setHealDate(DateTime.convertDate(dcCheckDate.getDate()));
        }
        if (tfHospital.getText().isEmpty()) {
            note += "<br>* Tên bệnh viện " + Message.EMPTY;
            check = false;
        } else {
            hs.setHospital(tfHospital.getText().trim());
        }
        if (Check.checkNum(tfHeight.getText().trim())) {
            note += "<br>* Chiều cao " + Message.ERROR;
            check = false;
        } else {
            hs.setHeight(Short.valueOf(tfHeight.getText()));
        }
        if (Check.checkNum(tfWeight.getText().trim())) {
            note += "<br>* Cân nặng " + Message.ERROR;
            check = false;
        } else {
            hs.setWeight(Short.valueOf(tfWeight.getText()));
        }
        hs.setBloodID(getKindID(cbBlood));
        if (tfSight.getText().trim().isEmpty()) {
            note += "<br>* Thị lực " + Message.EMPTY;
            check = false;
        } else {
            hs.setSight(tfSight.getText());
        }
        hs.setHealthStatusID(getKindID(cbHealthStatus));
        hs.setNote(tfHealthNote.getText());
        lbNote3.setEnabled(!check);
        if (check) {
            if (pDAO.insertHealthStatus(personnelID, hs)) {
                short lastID = pDAO.getLastIndex(pDAO.tblID.get(0), pDAO.personnelTable.get(1));
                healthID.add(lastID);
                addRowToHealthTable();
                resetHealthTab();
            }
        } else {
            Dialog.showMsg(Message.OPTION_ERROR, 0);
            lbNote3.setText(note + "<font>");
        }
    }

    private void insertFamily(String personnelID) {
        FamilyDetails fd = new FamilyDetails();
        String note = "<html><font color=\"red\">";
        boolean check = true;
        fd.setRelationID(getKindID(cbRelationship));
        if (Check.checkStringVN(tfFullname.getText().trim(), false)) {
            fd.setPerName(tfFullname.getText());
        } else {
            note += "<br>* Tên đầy đủ" + Message.NAME_VI;
            check = false;
        }
        if (dcBirth.getDate() == null) {
            note += "<br>* Ngày sinh" + Message.DATE;
            check = false;
        } else {
            fd.setPerBirth(DateTime.convertDate(dcBirth.getDate()));
        }
        fd.setPerJob(tfJob.getText());
        if (Check.checkStringVN(tfAdd.getText().trim(), false)) {
            fd.setPerAdd(tfAdd.getText());
        } else {
            note += "<br>* Địa chỉ" + Message.ADDRESS_VI;
            check = false;
        }
        fd.setPerPhone(tfPhone.getText());
        lbNote4.setEnabled(!check);
        if (check) {
            if (pDAO.insertFamilyDetails(personnelID, fd)) {
                short lastID = pDAO.getLastIndex(pDAO.tblID.get(1), pDAO.personnelTable.get(2));
//            System.out.println(lastID);
                familyID.add(lastID);
                addRowToFamilyTable();
                resetFamilyTab();
            }
        } else {
            Dialog.showMsg(Message.OPTION_ERROR, 0);
            lbNote4.setText(note + "<font>");
        }
    }

    private void insertEducation(String personnelID) {
        Education edu = new Education();

        edu.setKindID(getKindID(cbKindOfEdu));
        edu.setCourseName(tfCourseName.getText());
        edu.setGraduationID(getKindID(cbCertification));
        edu.setSchoolName(tfSchool.getText());
        edu.setFromYear((short) ycFromYear.getYear());
        edu.setToYear((short) ycToYear.getYear());

        if (pDAO.insertEducationInfo(personnelID, edu)) {
            short lastID = pDAO.getLastIndex(pDAO.tblID.get(2), pDAO.personnelTable.get(3));
            eduID.add(lastID);
            addRowToEducationTable();
            resetEducationTab();
        }
    }

    private void insertSkill(String personnelID) {
        Skill sk = new Skill();
        String note = "<html><font color=\"red\">";
        boolean check = true;
        sk.setNameID(getKindID(cbSkill));
        sk.setClassificationID(getKindID(cbRank));
        if (dcEffectiveDate.getDate() == null) {
            note += "<br>* Ngày hiệu lực" + Message.DATE;
            check = false;
        } else {
            sk.setEffectiveDate(DateTime.convertDate(dcEffectiveDate.getDate()));
        }
        sk.setNote(tfSkillNote.getText());
        lbNote5.setEnabled(!check);
        if (check) {
            if (pDAO.insertSkillInfo(personnelID, sk)) {
                short lastID = pDAO.getLastIndex(pDAO.tblID.get(3), pDAO.personnelTable.get(4));
                skillID.add(lastID);
                addRowToSkillTable();
                resetSkillTab();
            }
        } else {
            Dialog.showMsg(Message.OPTION_ERROR, 0);
            lbNote5.setText(note + "<font>");
        }
    }

    private void insertExperience(String personnelID) {
        Experience exp = new Experience();
        String note = "<html><font color=\"red\">";
        boolean check = true;
        exp.setCompName(tfCompName.getText());
        exp.setPos(tfExpPos.getText());
        exp.setJob(tfDescribeJob.getText());
        if (dcExpStartDate.getDate() == null) {
            note += "<br>* Từ ngày" + Message.DATE;
            check = false;
        } else {
            exp.setStartDate(DateTime.convertDate(dcExpStartDate.getDate()));
        }
        if (dcExpQuitDate.getDate() == null) {
            note += "<br>* Đến ngày" + Message.DATE;
            check = false;
        } else {
            exp.setEndDate(DateTime.convertDate(dcExpQuitDate.getDate()));
        }
        exp.setReason(tfReason.getText());
        exp.setReferName(tfRefereeName.getText());
        if (Check.checkPhone(tfRefereePhone.getText().trim())) {
            exp.setReferPhone(tfRefereePhone.getText());
        } else {
            note += "<br>* Số điện thoại " + Message.PHONE;
            check = false;
        }
        if (Check.checkEmail(tfRefereeEmail.getText().trim())) {
            exp.setReferEmail(tfRefereeEmail.getText());
        } else {
            note += "<br>* Email " + Message.EMAIL;
            check = false;
        }

        exp.setReferPos(tfRefereePos.getText());

        lbNote6.setEnabled(!check);
        if (check) {
            if (pDAO.insertExperience(personnelID, exp)) {
                short lastID = pDAO.getLastIndex(pDAO.tblID.get(4), pDAO.personnelTable.get(5));
                expID.add(lastID);
                addRowToExpTable();
                resetExpTab();
            }
        } else {
            Dialog.showMsg(Message.OPTION_ERROR, 0);
            lbNote6.setText(note + "<font>");
        }
    }

    private void insertDocument(String personnelID) {
        DocumentsDetails doc = new DocumentsDetails();
        String note = "<html><font color=\"red\">";
        boolean check = true;
        doc.setName(tfDocName.getText());
        doc.setFile(this.file);
        perFile.add(this.file);
        if (dcSaveDate.getDate() == null) {
            note += "<br>* Ngày lưu " + Message.DATE;
            check = false;
        } else {
            doc.setSaveDate(DateTime.convertDate(dcSaveDate.getDate()));
        }
        doc.setExtension(this.fileExtension);
        doc.setKindID(getKindID(cbKindofDoc));
        lbNote7.setEnabled(!check);
        if (check) {
            if (pDAO.insertDocumentDetails(personnelID, doc)) {
                short lastID = pDAO.getLastIndex(pDAO.tblID.get(5), pDAO.personnelTable.get(6));
                docID.add(lastID);
                addRowToDocTable();
                resetDocTab();
            }
        } else {
            Dialog.showMsg(Message.OPTION_ERROR, 0);
            lbNote7.setText(note + "<font>");
        }
    }

    private void addRowToHealthTable() {
        ArrayList<String> rowData = new ArrayList<>();

        rowData.add(DateTime.convertDate(DateTime.convertDate(dcCheckDate.getDate())));
        rowData.add(tfHospital.getText());
        rowData.add(tfHeight.getText());
        rowData.add(tfWeight.getText());
        rowData.add(cbBlood.getSelectedItem().toString());
        rowData.add(tfSight.getText());
        rowData.add(cbHealthStatus.getSelectedItem().toString());
        rowData.add(tfHealthNote.getText());

        DefaultTableModel model = (DefaultTableModel) tbHealthStatus.getModel();
        model.addRow(rowData.toArray());
    }

    private void addRowToFamilyTable() {
        ArrayList<String> rowData = new ArrayList<>();

        rowData.add(cbRelationship.getSelectedItem().toString());
        rowData.add(tfFullname.getText());
        rowData.add(DateTime.convertDate(DateTime.convertDate(dcBirth.getDate())));
        rowData.add(tfJob.getText());
        rowData.add(tfAdd.getText());
        rowData.add(tfPhone.getText());

        DefaultTableModel model = (DefaultTableModel) tbFamilyInfo.getModel();
        model.addRow(rowData.toArray());
    }

    private void addRowToEducationTable() {
        ArrayList<String> rowData = new ArrayList<>();

        rowData.add(cbKindOfEdu.getSelectedItem().toString());
        rowData.add(tfCourseName.getText());
        rowData.add(ycFromYear.getYear() + " - " + ycToYear.getYear());
        rowData.add(tfSchool.getText());
        rowData.add(cbCertification.getSelectedItem().toString());

        DefaultTableModel model = (DefaultTableModel) tbEducation.getModel();
        model.addRow(rowData.toArray());
    }

    private void resetHealthTab() {
        dcCheckDate.setDate(null);
        tfHospital.setText("");
        tfHeight.setText("");
        tfWeight.setText("");
        cbBlood.setSelectedIndex(0);
        tfSight.setText("");
        cbHealthStatus.setSelectedIndex(0);
        tfHealthNote.setText("");
    }

    private void resetFamilyTab() {
        cbRelationship.setSelectedIndex(0);
        tfFullname.setText("");
        dcBirth.setDate(null);
        tfJob.setText("");
        tfAdd.setText("");
        tfPhone.setText("");
    }

    private void resetEducationTab() {
        cbKindOfEdu.setSelectedIndex(0);
        tfCourseName.setText("");
        int year = Calendar.getInstance().get(Calendar.YEAR);
        ycFromYear.setYear(year);
        ycToYear.setYear(year);
        tfSchool.setText("");
        cbCertification.setSelectedIndex(0);
    }

    private void addRowToSkillTable() {
        ArrayList<String> rowData = new ArrayList<>();

        rowData.add(cbSkill.getSelectedItem().toString());
        rowData.add(cbRank.getSelectedItem().toString());
        rowData.add(DateTime.convertDate(DateTime.convertDate(dcEffectiveDate.getDate())));
        rowData.add(tfSkillNote.getText());

        DefaultTableModel model = (DefaultTableModel) tbSkill.getModel();
        model.addRow(rowData.toArray());
    }

    private void resetSkillTab() {
        cbSkill.setSelectedIndex(0);
        cbRank.setSelectedIndex(0);
        dcEffectiveDate.setDate(null);
        tfSkillNote.setText("");
    }

    private void addRowToExpTable() {
        ArrayList<String> rowData = new ArrayList<>();

        rowData.add(tfCompName.getText());
        rowData.add(tfExpPos.getText());
        rowData.add(tfDescribeJob.getText());
        rowData.add(DateTime.convertDate(DateTime.convertDate(dcExpStartDate.getDate())));
        rowData.add(DateTime.convertDate(DateTime.convertDate(dcExpQuitDate.getDate())));
        rowData.add(tfReason.getText());
        rowData.add(tfRefereeName.getText());
        rowData.add(tfRefereePos.getText());
        rowData.add(tfRefereePhone.getText());
        rowData.add(tfRefereeEmail.getText());

        DefaultTableModel model = (DefaultTableModel) tbExpList.getModel();
        model.addRow(rowData.toArray());
    }

    private void resetExpTab() {
        tfCompName.setText("");
        tfExpPos.setText("");
        tfDescribeJob.setText("");
        dcExpStartDate.setDate(null);
        dcExpQuitDate.setDate(null);
        tfReason.setText("");
        tfRefereeName.setText("");
        tfRefereePhone.setText("");
        tfRefereePos.setText("");
        tfRefereeEmail.setText("");
    }

    private void addRowToDocTable() {
        ArrayList<String> rowData = new ArrayList<>();

        rowData.add(tfDocName.getText());
        rowData.add(cbKindofDoc.getSelectedItem().toString());
        rowData.add(DateTime.convertDate(DateTime.convertDate(dcSaveDate.getDate())));
        rowData.add(tfPersonnelID.getText() + "_" + tfDocName.getText() + "(" + cbKindofDoc.getSelectedItem() + ")." + this.fileExtension);

        DefaultTableModel model = (DefaultTableModel) tbDocument.getModel();
        model.addRow(rowData.toArray());
    }

    private void resetDocTab() {
        tfDocName.setText("");
        tfDocInfo.setText("");
        cbKindofDoc.setSelectedIndex(0);
        tfDocLink.setText("");
        dcSaveDate.setDate(null);
    }

    private void convertImage(String absolutePath) {
        File imageFile = new File(absolutePath);
        FileInputStream fis;
        setPersonnelImage(new byte[(int) imageFile.length()]);
        try {
            fis = new FileInputStream(imageFile);
            fis.read(this.personnelImage);
            fis.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(PanelInfo.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(PanelInfo.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void convertFile(String path) {
        File docFile = new File(path);
        FileInputStream fis;
        setFile(new byte[(int) docFile.length()]);
        try {
            fis = new FileInputStream(docFile);
            fis.read(this.file);
            fis.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(PanelInfo.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(PanelInfo.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private boolean checkID() {
        if (tfPersonnelID.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Bạn chưa nhập vào mã nhân viên", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
            tpInfo.setSelectedIndex(0);
            return false;
        }
        return true;
    }

    private void delPic() {
        lbPicture.setIcon(null);
        lbPicture.setText("Ảnh cá nhân");
    }

    private void openDocumentFile(String absolutePath) {
        try {
            Desktop desktop = Desktop.getDesktop();
            desktop.open(new File(absolutePath));
        } catch (IOException ex) {
            Logger.getLogger(PanelInfo.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    @Override
    public void itemStateChanged(ItemEvent e) {
        if (e.getStateChange() == ItemEvent.SELECTED) {
            if (e.getItem().toString().equals("(NEW)")) {
                if (e.getSource() instanceof JComboBox) {
                    JComboBox cbox = (JComboBox) e.getSource();
                    Addition a = new Addition(null, true, Integer.parseInt(cbox.getActionCommand()), this, cbox);
                    a.setVisible(true);
                }
            }
        }

    }

    private void setComboboxListener() {
        cbBank.addItemListener(this);
        cbBlood.addItemListener(this);
        cbCertification.addItemListener(this);
        cbContract.addItemListener(this);
        cbFolk.addItemListener(this);
        cbHealthStatus.addItemListener(this);
        cbKind.addItemListener(this);
        cbKindOfEdu.addItemListener(this);
        cbKindofDoc.addItemListener(this);
        cbNation.addItemListener(this);
        cbOffice.addItemListener(this);
        cbRank.addItemListener(this);
        cbPosition.addItemListener(this);
        cbRegion.addItemListener(this);
        cbRelationship.addItemListener(this);
        cbReligion.addItemListener(this);
        cbSkill.addItemListener(this);
        cbStatus.addItemListener(this);
    }

    private void deletePersonnelInfo() {
        pDAO.deletePersonnel(tfPersonnelID.getText());
        Dialog.showMsg(Message.DELETE_OK, 1);
    }

    private void deleteFromTable(int selectedIndex, JTable tb) {
        int row = tb.getSelectedRow();
        short ID = -1;
        switch (selectedIndex) {
            case 2:
                ID = healthID.get(row);
                break;
            case 3:
                ID = familyID.get(row);
                break;
            case 4:
                ID = eduID.get(row);
                break;
            case 5:
                ID = skillID.get(row);
                break;
            case 6:
                ID = expID.get(row);
                break;
            case 7:
                ID = docID.get(row);
                break;
        }
        if (pDAO.deleteTableInfo(pDAO.personnelTable.get(selectedIndex - 1), pDAO.tblID.get(selectedIndex - 2), ID)) {
            DefaultTableModel model = (DefaultTableModel) tb.getModel();
            model.removeRow(row);
            Dialog.showMsg(Message.DELETE_OK, 1);
        } else {
            Dialog.showMsg(Message.DELETE_ERROR, 0);
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgMarried;
    private javax.swing.ButtonGroup bgSex;
    private javax.swing.JButton btAdd;
    private javax.swing.JButton btDel;
    private javax.swing.JButton btFileChooser;
    private javax.swing.JButton btOpenFile;
    private javax.swing.JButton btSave;
    private javax.swing.JButton btUndo;
    private javax.swing.JComboBox cbBank;
    private javax.swing.JComboBox cbBlood;
    private javax.swing.JComboBox cbCertification;
    private javax.swing.JComboBox cbContract;
    private javax.swing.JComboBox cbFolk;
    private javax.swing.JComboBox cbHealthStatus;
    private javax.swing.JComboBox cbKind;
    private javax.swing.JComboBox cbKindOfEdu;
    private javax.swing.JComboBox cbKindofDoc;
    private javax.swing.JComboBox cbNation;
    private javax.swing.JComboBox cbOffice;
    private javax.swing.JComboBox cbPosition;
    private javax.swing.JComboBox cbRank;
    private javax.swing.JComboBox cbRegion;
    private javax.swing.JComboBox cbRelationship;
    private javax.swing.JComboBox cbReligion;
    private javax.swing.JComboBox cbSkill;
    private javax.swing.JComboBox cbStatus;
    private com.toedter.calendar.JDateChooser dcBirth;
    private com.toedter.calendar.JDateChooser dcCheckDate;
    private com.toedter.calendar.JDateChooser dcEffectiveDate;
    private com.toedter.calendar.JDateChooser dcEndTrainingDate;
    private com.toedter.calendar.JDateChooser dcEnterDate;
    private com.toedter.calendar.JDateChooser dcExpQuitDate;
    private com.toedter.calendar.JDateChooser dcExpStartDate;
    private com.toedter.calendar.JDateChooser dcIDDay;
    private com.toedter.calendar.JDateChooser dcPerBirth;
    private com.toedter.calendar.JDateChooser dcSaveDate;
    private com.toedter.calendar.JDateChooser dcStartDate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel58;
    private javax.swing.JLabel jLabel59;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel60;
    private javax.swing.JLabel jLabel61;
    private javax.swing.JLabel jLabel62;
    private javax.swing.JLabel jLabel64;
    private javax.swing.JLabel jLabel65;
    private javax.swing.JLabel jLabel66;
    private javax.swing.JLabel jLabel67;
    private javax.swing.JLabel jLabel68;
    private javax.swing.JLabel jLabel69;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel70;
    private javax.swing.JLabel jLabel72;
    private javax.swing.JLabel jLabel73;
    private javax.swing.JLabel jLabel74;
    private javax.swing.JLabel jLabel75;
    private javax.swing.JLabel jLabel76;
    private javax.swing.JLabel jLabel77;
    private javax.swing.JLabel jLabel78;
    private javax.swing.JLabel jLabel79;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JLabel lbNote;
    private javax.swing.JLabel lbNote1;
    private javax.swing.JLabel lbNote3;
    private javax.swing.JLabel lbNote4;
    private javax.swing.JLabel lbNote5;
    private javax.swing.JLabel lbNote6;
    private javax.swing.JLabel lbNote7;
    private javax.swing.JLabel lbPicture;
    private javax.swing.JPanel pnPicture;
    private javax.swing.JRadioButton rbFemale;
    private javax.swing.JRadioButton rbMale;
    private javax.swing.JRadioButton rbMarried;
    private javax.swing.JRadioButton rbSingle;
    private javax.swing.JTable tbDocument;
    private javax.swing.JTable tbEducation;
    private javax.swing.JTable tbExpList;
    private javax.swing.JTable tbFamilyInfo;
    private javax.swing.JTable tbHealthStatus;
    private javax.swing.JTable tbSkill;
    private javax.swing.JTextField tfAdd;
    private javax.swing.JTextField tfBankCode;
    private javax.swing.JTextField tfCompEmail;
    private javax.swing.JTextField tfCompName;
    private javax.swing.JTextField tfCourseName;
    private javax.swing.JTextField tfDescribeJob;
    private javax.swing.JTextField tfDocInfo;
    private javax.swing.JTextField tfDocLink;
    private javax.swing.JTextField tfDocName;
    private javax.swing.JTextField tfEduLevel;
    private javax.swing.JTextField tfExpPos;
    private javax.swing.JTextField tfFirstName;
    private javax.swing.JTextField tfFullname;
    private javax.swing.JTextField tfHealthNote;
    private javax.swing.JTextField tfHeight;
    private javax.swing.JTextField tfHospital;
    private javax.swing.JTextField tfIDNum;
    private javax.swing.JTextField tfIDPlace;
    private javax.swing.JTextField tfJob;
    private javax.swing.JTextField tfLastName;
    private javax.swing.JTextField tfNickname;
    private javax.swing.JTextField tfPerAdd;
    private javax.swing.JTextField tfPerEmail;
    private javax.swing.JTextField tfPerPhone;
    private javax.swing.JTextField tfPersonnelID;
    private javax.swing.JTextField tfPhone;
    private javax.swing.JTextField tfPlaceOfBirth;
    private javax.swing.JTextField tfReason;
    private javax.swing.JTextField tfRecentAdd;
    private javax.swing.JTextField tfRefereeEmail;
    private javax.swing.JTextField tfRefereeName;
    private javax.swing.JTextField tfRefereePhone;
    private javax.swing.JTextField tfRefereePos;
    private javax.swing.JTextField tfSchool;
    private javax.swing.JTextField tfSight;
    private javax.swing.JTextField tfSkillNote;
    private javax.swing.JTextField tfTaxCode;
    private javax.swing.JTextField tfWeight;
    private javax.swing.JTabbedPane tpInfo;
    private com.toedter.calendar.JYearChooser ycFromYear;
    private com.toedter.calendar.JYearChooser ycToYear;
    // End of variables declaration//GEN-END:variables
}
