/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui.panel;

import db.connection.PersonnelDAO;
import gui.frames.Main;
import java.awt.Point;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;
import entities.DocumentsDetails;
import entities.Education;
import entities.Experience;
import entities.FamilyDetails;
import entities.HealthStatus;
import entities.PersonnelBasic;
import entities.PersonnelDetails;
import entities.Skill;

/**
 *
 * @author HUNGUYEN
 */
public class PanelPersonnelList extends javax.swing.JPanel {

    /**
     * Creates new form EmployList
     */
    private final PersonnelDAO pDAO = new PersonnelDAO();
    private ArrayList<PersonnelBasic> pRow = pDAO.getRowPersonnelListTable();
    private ArrayList<String> rowData;
    private PanelInfo panelInfo = null;
    private DefaultTableModel pListModel;
    private final Object[] COLUMN_NAME = {"Mã nhân viên", "Tên nhân viên", "Ngày sinh", "Giới tính", "Phòng ban",
        "Chức vụ", "Loại nhân viên", "Loại hợp đồng", "Số điện thoại", "Email riêng",
        "Email công ty"};
    private final Main main;

    public PanelPersonnelList(Main main) {

        initComponents();
        this.main = main;
        setTable();
        loadTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tbPersonnelList = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        tfSearch = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        cbSearchList = new javax.swing.JComboBox();
        btRefesh = new javax.swing.JButton();

        tbPersonnelList.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        tbPersonnelList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Mã nhân viên", "Tên nhân viên", "Ngày sinh", "Giới tính", "Phòng ban", "Chức vụ", "Loại nhân viên", "Loại hợp đồng", "Số điện thoại", "Email riêng", "Email công ty"
            }
        ));
        tbPersonnelList.setShowHorizontalLines(false);
        tbPersonnelList.setShowVerticalLines(false);
        jScrollPane1.setViewportView(tbPersonnelList);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Tìm kiếm"));

        tfSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tfSearchKeyReleased(evt);
            }
        });

        jLabel1.setText("Tìm theo:");

        cbSearchList.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Tên nhân viên", "Mã nhân viên" }));

        btRefesh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/toolbar/Refresh.png"))); // NOI18N
        btRefesh.setText("Làm mới");
        btRefesh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btRefeshActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(129, 129, 129)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(cbSearchList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(tfSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btRefesh)
                .addContainerGap(267, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(tfSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(cbSearchList, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btRefesh))
                .addGap(12, 12, 12))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 439, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btRefeshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btRefeshActionPerformed
        loadTable();
    }//GEN-LAST:event_btRefeshActionPerformed

    private void tfSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tfSearchKeyReleased
        int searchFilter = cbSearchList.getSelectedIndex();
        String searchFor = tfSearch.getText();
        loadTable(searchFilter, searchFor);
    }//GEN-LAST:event_tfSearchKeyReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btRefesh;
    private javax.swing.JComboBox cbSearchList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tbPersonnelList;
    private javax.swing.JTextField tfSearch;
    // End of variables declaration//GEN-END:variables

    //Used for refreshing table (Udating from DB) & create new viewer
    private void loadTable() {
        pRow = pDAO.getRowPersonnelListTable();
        pListModel = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int rowIndex, int mColIndex) {
                return false;
            }
        };
        pListModel.setColumnIdentifiers(COLUMN_NAME);
        rowData = new ArrayList<>();
        for (int i = 0; i < pRow.size(); i++) {
            addRowToTable(i);
            pListModel.addRow(rowData.toArray());
            rowData.clear();
        }
        tbPersonnelList.setModel(pListModel);
        addDoubleClickEvent(tbPersonnelList);
    }

    //Used for searching someones by searchFilter in Combobox
    private void loadTable(int mode, String searchFor) {
        pListModel = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int rowIndex, int mColIndex) {
                return false;
            }
        };
        pListModel.setColumnIdentifiers(COLUMN_NAME);
        rowData = new ArrayList<>();
        String search = "";
        for (int i = 0; i < pRow.size(); i++) {
            switch (mode) {
                case 0:
                    search = pRow.get(i).getName();
                    break;
                case 1:
                    search = pRow.get(i).getPersonnelID();
                    break;
            }
            if (search.toLowerCase().contains(searchFor.toLowerCase())) {
                addRowToTable(i);
                pListModel.addRow(rowData.toArray());
                rowData.clear();
            }
        }
        tbPersonnelList.setModel(pListModel);
    }

    private void addRowToTable(int i) {
        rowData.add(pRow.get(i).getPersonnelID());
        rowData.add(pRow.get(i).getName());
        rowData.add(pRow.get(i).getBirth());
        rowData.add(pRow.get(i).getSex());
        rowData.add(pRow.get(i).getOffice());
        rowData.add(pRow.get(i).getPosition());
        rowData.add(pRow.get(i).getPerKind());
        rowData.add(pRow.get(i).getPerContract());
        rowData.add(pRow.get(i).getPhone());
        rowData.add(pRow.get(i).getPerEmail());
        rowData.add(pRow.get(i).getCompEmail());
    }

//    public static void main(String[] args) {
//        JFrame f = new JFrame();
//        f.add(new PersonnelList());
//        f.setSize(1000, 700);
//
//        f.setVisible(true);
//        f.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
//    }
    private void setTable() {
        tbPersonnelList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        tbPersonnelList.getTableHeader().setReorderingAllowed(false);
        tbPersonnelList.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
    }

    private void addDoubleClickEvent(JTable table) {
        table.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent me) {
                if (me.getClickCount() == 2) {
                    JTable table = (JTable) me.getSource();
                    Point point = me.getPoint();
                    int row = table.rowAtPoint(point);
                    String personnelID = (String) table.getValueAt(row, 0);
                    String name = (String) table.getValueAt(row, 1);
//                    System.out.println(personnelID);
                    showPersonnelDetails(personnelID, name);
                }
            }
        });
    }

    private void showPersonnelDetails(String personnelID, String name) {
        PersonnelDetails personnelDetails = pDAO.getPersonnelDetails(personnelID);
        ArrayList<FamilyDetails> familyList = pDAO.getFamilyDetails(personnelID);
        ArrayList<HealthStatus> healthList = pDAO.getHealthStatus(personnelID);
        ArrayList<Education> eduList = pDAO.getEducation(personnelID);
        ArrayList<Skill> skillList = pDAO.getSkill(personnelID);
        ArrayList<Experience> expList = pDAO.getExperience(personnelID);
        ArrayList<DocumentsDetails> docList = pDAO.getDocumentsDetails(personnelID);

        String title="Thông tin NV";
        panelInfo = new PanelInfo(personnelDetails, familyList, healthList, eduList, skillList, expList, docList);
        main.removeTab(title);
        main.getTpRight().add(title, panelInfo);
        main.initTabComponent(Main.indexTab);
        main.setSelectedTab(title);
    }
}
